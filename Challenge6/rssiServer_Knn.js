var SerialPort = require("serialport");
var app = require('express')();
var xbee_api = require('xbee-api');
var KNN = require('ml-knn');

var express = require('express')();
var http = requre('http').Server(app);
var io = require('socket.io')(http);


app.use('/fonts', express.static(__dirname + 'frontend/fonts'));
app.use('/images', express.static(__dirname + '/frontend/images'));
app.use('/', express.static(__dirname + '/frontend'));


app.get('/localization', function(req, res){
  res.sendfile('frontend/index.html');
});


var fs = require('fs')
var C = xbee_api.constants;
var XBeeAPI = new xbee_api.XBeeAPI({
  api_mode: 2
});

var count = 0;
var flag = [0,0,0,0];
var portName = process.argv[2];
var knn = new KNN();

var sampleDelay = 2000;
var dataset = [[0, 0, 0, 0]];

portConfig = {
	baudRate: 9600,
  parser: XBeeAPI.rawParser()
};

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
  });
});

http.listen(4000, function(){
  //listen on localhost port 4000
  console.log('listening on *:4000');
});

var train = [[45,40,67.6,74],
[49.2,40.8,69.8,74.6],
[46.8,43.8,65.6,74],
[47.2,40.4,69.6,76],
[54.4,52.8,65.8,77.8],
[52.8,47.6,64,77.8],
[56.4,42.8,62,74.2],
[53.8,45,63.2,74.6],
[56.4,48.8,62.2,73.4],
[57,49.2,64,74.8],
[53.4,52.2,60.8,78.2],
[54.2,51.2,62,74.8],
[56.8,55,59.6,73.2],
[57.4,45.4,66.4,75.4],
[58.2,45.6,61.2,75.8],
[55.4,49,64.2,75.2],
[57.8,58.4,59.4,72],
[58.2,50,62.2,73.4],
[61.6,54,61.4,72.4],
[59.6,52.4,61.6,76.2],
[66.2,57.2,61,76.2],
[60.6,55.8,60,72.2],
[62.4,55.6,64.4,75.8],
[60.2,56.6,58.4,76.4],
[67.2,60,62.2,73.8],
[67.8,58,62.4,72.6],
[64,59.2,61.8,69.8],
[63,58.4,64,74],
[69.8,63.4,58,69],
[67.4,57.8,60.4,72.6],
[62.8,58.2,61.6,70.8],
[67.4,63.6,58.2,73],
[67.6,61.4,57.6,66.8],
[67.6,60.8,58,71.4],
[61.2,60.6,59.2,69.2],
[68,63,54.2,72.6],
[71.4,61.2,52.6,66.8],
[65.6,61.6,57.8,72.4],
[67.2,62.6,57.2,69.2],
[68,64.4,51,65.6],
[69.2,64.8,52.4,73.2],
[67.2,61.4,56.6,68.4],
[71.6,66,53.8,71],
[76.6,65.4,51.2,69],
[72.8,68,52,64.2],
[72.6,58.6,55.4,67.6],
[70,65.2,54.6,67.8],
[70.8,63.2,56.4,64],
[76.4,70.6,53,65.2],
[68,59.8,51.8,68.6],
[68.8,62.8,51,61],
[70.2,65.6,53,67.4],
[72.8,65.8,45,61.2],
[67.8,58.4,55.8,62.8],
[73.4,66.8,53,58.2],
[71.6,60,53.8,63.2],
[75.2,68,47.8,64],
[71.6,60.8,50.4,61.2],
[72.6,68.6,52,62.4],
[70.6,64.8,51.6,59.2],
[72.8,69,45.8,55.2],
[69,62,46.4,59.2],
[70.4,63.2,47,60],
[73.4,66.4,42.8,58.8],
[73,63.8,45.2,62],
[74,62.4,41.2,57],
[71.6,63.2,44,60.8],
[75.8,63.4,42,60],
[73,68.4,39,48.8],
[70,70.4,39,56],
[77.8,72.6,40.2,51],
[78.8,72.2,37.2,50.4],
[79,72.4,40.2,45.4],
[73.2,68.4,36.6,55.6],
[72.6,64.8,40.6,52.2],
[76.2,70.2,40.2,46.4],
[79.8,77.6,48.6,46],
[80.2,74,43.8,45.6],
[77.8,72.6,43.4,48.8],
[77.2,77.6,43.6,49.2],
[80,76.8,45.6,48.2],
[77.2,77.6,44.4,48],
[78.2,78,44.2,50.4],
[83.4,78.6,50,44.6],
[79,76.6,49.4,42],
[79,78.8,46,45.4],
[80,78.6,48.4,46],
[80.4,79.8,47.4,46.4],
[78.8,82.8,46.8,43.8],
[81,78,47.2,39.2],
[80.8,79.6,50.2,49.4],
[79.4,82.4,50,40.2],
[76.6,80.8,51.2,44.2],
[75.2,78.6,50.2,39.6],
[76.6,78.4,50.4,41.4],
[73.2,78.8,51.6,43.4],
[70,71.8,50.6,37],
[65.4,75.2,51,37.4],
[67,70,49.4,40.4],
[68.6,70.8,47,41.8],
[64.4,72.6,52.2,39.6],
[68.8,71.6,55.6,38],
[63.8,68.4,52.2,41],
[62.2,71.4,56.6,44.2],
[62.4,71.2,63.4,45.6],
[66.4,71,58,46.4],
[61.8,68,62.4,43.6],
[66.8,70.8,59,45.8],
[68.8,71.6,60.6,49.6],
[67,75.2,62.4,48.8],
[64.4,69.2,59.8,47],
[64.4,69.2,59.8,47],
[66.6,66.8,61.6,48.6],
[65.4,69.2,60.4,47.6],
[65.6,68.4,64.6,51.4],
[65.6,66.8,63.2,49.8],
[62.8,68.4,62.4,56.4],
[57.2,69.4,60.6,49.8],
[60.6,69.2,67,51],
[63.4,67.4,62.8,57],
[64.6,65,69.6,53.4],
[65.6,76.2,65.2,54],
[61.4,70.8,66.6,53.2],
[65,62.2,70.8,56.4],
[55.8,65.8,69.2,53.2],
[63.8,66.6,65.8,58],
[64.2,71.6,69,55.2],
[61.6,72.8,69.4,57.4],
[55.8,65.8,69.2,53.2],
[63.8,66.6,65.8,58],
[64.2,71.6,69,55.2],
[61.6,72.8,69.4,57.4],
[56.8,65.6,71.8,61.2],
[63.2,74,68.6,61.8],
[69.4,66.8,73.4,59],
[61.8,63.8,68.8,60.2],
[59.4,71.2,67.6,63.2],
[58.6,63.8,73,58],
[61,65,70.8,58.8],
[67.4,66.8,70,57.4],
[57.4,66.2,76.6,63.6],
[60.2,61.8,73.4,61.2],
[58.2,60.2,72.2,67.4],
[62.2,61.8,74.8,61],
[54,66.4,73.6,64.4],
[56.6,61.8,72.4,59.4],
[59.4,65,71.8,64.6],
[54,67.8,73,67.6],
[56.4,65,76.2,64.2],
[56.2,61.8,76.8,64.6],
[55.8,62.4,76.2,64.8],
[61.6,62,74.2,70.6],
[57,59.4,77.2,62.4],
[49.8,59.6,77,63.2],
[57.6,59.2,71.4,60.2],
[54.4,57,76.6,63.6],
[51.4,57,75.4,63.8],
[54.4,58.2,74.6,60.2],
[53.6,57.4,75,65.6],
[46.6,55.2,73.6,68.2],
[50.2,53.2,74.2,64.4],
[50.4,54.2,73.2,65.6],
[50.4,54.2,73.6,64.2],
[50.8,52.4,76.2,64],
[48,51.6,77.6,63.2],
[44.4,52.4,74.4,66.4],
[48.6,48.2,72.8,64.2],
[49,53,74.8,64.6],
[48.2,44.8,76.8,61.6],
[43.6,47.4,73,65],
[44.2,53,78.4,61.8],
[46.2,46.2,74.2,66.4],
[38,42,70.8,68.2],
[45.2,45.6,73.8,62.2],
[40.8,46.6,68.8,64.2],
[41.2,40.8,73.2,59.6],
[44.2,40.2,73.2,72.8],
[41.6,49.6,76.4,74],
[39,43.6,77.6,68],
[41.8,40.2,71,68.8],
[45.4,41.8,70.2,73.8],
[43.2,43.4,74.2,73.6],
[39.8,40.6,74.8,70.6],
[42.4,39.6,69,76.8],
[48,43.6,74,77.8],
[41,39.2,68.8,75],
[40.6,42.6,70.6,72],
[46.4,41,65.2,73.2],
[42.2,43.6,69.6,75.8],
[44.4,37.6,72.8,77.4],
[40.6,40,67.8,75.2],
[49.6,46.4,66,75.8]];

var prediction = [1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,
				  8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,
				  13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,
				  18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,
				  23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25];
				  
knn.train(train, prediction);
var sp;
sp = new SerialPort.SerialPort(portName, portConfig);

var RSSIRequestPacket = {
  type: C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST,
  destination64: "000000000000ffff",
  broadcastRadius: 0x01,
  options: 0x00,
  data: "test"
}

var requestRSSI = function(){
  sp.write(XBeeAPI.buildFrame(RSSIRequestPacket));
}

sp.on("open", function () {
  console.log('open');
  requestRSSI();
  setInterval(requestRSSI, sampleDelay);
});


XBeeAPI.on("frame_object", function(frame) {
  if (frame.type == 144)
  {
    switch(frame.data[1])
    {
      case 1:
              if(flag[0] != 1)
              {
                dataset[0][0] = frame.data[0];
                count++;
              }
              break;
      case 2:
              if(flag[1] != 1)
              {
                dataset[0][1] = frame.data[0];
                count++;
              }
              break;
      case 3:
              if(flag[2] != 1)
              {
                dataset[0][2] = frame.data[0];
                count++;
              }     
              break;           
      case 4:
              if(flag[3] != 1)
              {
                dataset[0][3] = frame.data[0];
                count++;
              }
              break;
    }
    if(count == 4)
    {
      console.log(dataset);
      var ans = knn.predict(dataset);
      console.log(ans);
      flag = [0,0,0,0];
      count = 0;
    }
  }
});
