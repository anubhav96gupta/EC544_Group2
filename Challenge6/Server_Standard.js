var SerialPort = require("serialport");
var app = require('express')();
var xbee_api = require('xbee-api');
var KNN = require('ml-knn');
var fs = require('fs');
var express = require('express');
var http = require('http').Server(app);
var io = require('socket.io')(http);

app.use('/fonts', express.static(__dirname + '/frontend/fonts'));
app.use('/images', express.static(__dirname + '/frontend/images'));
app.use('/', express.static(__dirname + '/frontend'));


app.get('/localization', function(req, res){
  res.sendfile('frontend/index.html');
});

var C = xbee_api.constants;
var XBeeAPI = new xbee_api.XBeeAPI({
  api_mode: 2
});

var count = 0;
var flag = [0,0,0,0];
var portName = process.argv[2];
var knn = new KNN();

var sampleDelay = 2000;
var dataset = [[0, 0, 0, 0]];

portConfig = {
  baudRate: 9600,
  parser: XBeeAPI.rawParser()
};

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
  });
});

http.listen(4000, function(){
  console.log('listening on *:4000');
});

var train = [[42.4,38,67.1,75.4],
[45.4,39.4,67,75.4],
[40.2,44.6,66.4,78.7],
[40.8,43.1,64.9,76.5],
[39.9,41.5,67.7,76],
[40.3,42.3,71,75.9],			//1
[47.8,48.9,67.5,76.9],
[45.9,50.8,75.1,78.2],
[50.1,45.9,61.5,71.3],
[49.9,41.9,60.8,75.8],
[54.5,51.1,72.8,76.1],
[60.8,49.1,70.2,76.5],			//2
[53.9,46.4,65.5,74.9],
[53.3,49.5,67.1,80],
[53.6,55.2,66.9,70.8],
[54.5,50.1,66.3,72.1],
[66.3,53.5,66.8,70.9],
[68.7,58.2,72,79],			//3
[60.6,55.5,70.7,77.1],
[55.2,60,70.7,79.7],
[65.1,53.3,67.5,79],
[66,54.7,65.7,78.3],
[62.9,57.4,61,70.7],
[71.3,59.9,67.6,70.3],			//4
[62.6,55.9,59.5,65.3],
[67.3,56.5,61.2,77.4],
[67.7,53.7,58,69.3],
[63.5,54.6,57.9,67.3],
[70,56.1,64.9,73.2],
[71.7,62.8,57.4,68.7],			//5
[70.7,59.5,55.8,68.6],
[67.8,65.2,58,65.3],
[72.4,62.6,53.7,73],
[68.4,66.7,49,70.7],
[71.8,59.1,62.3,65.2],
[74.5,67.2,53,64.9],			//6
[76.7,66.8,55.7,64],
[79.2,69.6,67.8,70.8],
[73.4,61.1,58,67.5],
[75.1,63.9,58.1,65],
[74.2,68.1,56.5,65],
[75.3,71.5,53.4,62.1],			//7
[70.7,60.5,48.4,61.6],
[75.3,67.5,57.3,62.5],
[79.3,64.3,48.8,62.7],
[75.8,68,51.7,56.8],
[75.2,61.2,47.8,56.8],
[78,71,46.4,57.6],			//8
[78.5,71,47.8,60.1],
[78.5,72.7,54.8,54.4],
[76.2,65,42.5,53.2],
[75.7,64.1,40.5,52.5],
[77.7,71.8,46.1,51.7],
[78.5,73.5,41,49.1],			//9
[67.6,67.9,47.6,53.4],
[68.3,68.7,41.2,49.4],
[71.5,60.4,44.1,50.1],
[77.6,66.3,45.7,53.3],
[75.4,67.4,43.1,53.4],
[74.6,64.3,41.8,44.2],			//10
[73.1,68.1,45,48.2],
[80.4,72,42.4,44.8],
[76.3,79.8,45.1,46.2],
[80,76.3,46.2,47.8],
[79.7,78.5,51,50.5],
[74.7,77.4,49.3,46.4],			//11
[81.8,78.6,52.3,44.2],
[82.3,80.7,54.1,40.4],
[78.7,77.4,49.3,45.4],
[81.9,75.9,51.2,49.2],
[76.5,81.3,47.1,46.8],
[81.5,81.8,52.8,48.8],			//12
[76.3,74,51.5,42.4],
[72,78.3,54.7,40.8],
[70.1,82.4,56.5,38.9],
[69.2,80.5,56.1,37.8],
[73.6,75.1,56.6,41.3],
[66,82,50.1,42.9],			//13
[66.3,68.4,55.1,36],
[70.6,72.6,44.2,39.5],
[67.3,70,45.6,36],
[69.5,71.4,45.9,36],
[65,69.5,46.8,48.8],
[65.8,75.7,45.8,42.6],			//14
[69.6,67.6,57.6,51.9],
[63.4,68.8,55.9,41.1],
[64.3,72.9,55.5,54.7],
[68.4,67.7,66.7,52.6],
[63.5,66.6,63,48.8],
[68.5,73.9,61.6,60],			//15
[62.1,74,66.8,52.8],
[71.1,71.6,69.4,55.1],
[65.1,68.5,69.9,53.9],
[57.8,74.6,65.1,59.1],
[57.7,70.2,71,52.1],
[64.8,72.7,65.1,63.5],			//16
[64.1,65.9,67.1,56.6],
[58,62.5,73.3,58.1],
[58.1,67.8,70.4,63.5],
[59,72,74.2,59.4],
[58.2,71.1,69.4,59.6],
[55.3,71.9,71.9,64.5],			//17
[60.2,64.6,73.3,66.9],
[53.9,63.2,73,63.5],
[58.4,67.5,73.9,73],
[63.6,69.1,75.6,66.5],
[63,67.4,74.9,66.8],
[67.6,67.3,72.3,66.9],			//18
[55.1,64.8,80,66.8],
[54.2,71.2,80.4,63.5],
[47.2,60.8,74.8,67.8],
[47.5,60.1,77.2,72.2],
[55.8,62.5,81.3,68.7],
[55.3,57.2,80.4,66.1],			//19
[56.5,65.5,82.7,67.4],
[48.8,56,76.2,72.7],
[56.1,56.5,80.3,68.4],
[53.2,59.2,78.6,70.3],
[57.2,57.8,79.7,71.2],
[48.6,58.2,78,69.9],			//20
[59.7,53.6,79.8,69.5],
[49.9,52.7,77.6,68.5],
[53.3,51.7,81.3,71],
[49.2,51.8,78.9,72.9],
[57.5,55.9,81.2,73],
[52.6,54.2,79.6,66.4],			//21
[51.3,51.5,81.2,71.1],
[44.2,58,81.2,71.2],
[41.7,51.7,75.8,70.1],
[40,51.9,76.7,70.3],
[48,47.2,80.1,75.7],
[45.6,49.2,76.5,69.4],			//22
[42.1,47.6,78.7,70],
[44.2,40.1,73.4,67.5],
[44.2,48.5,74.1,63.4],
[46.7,46.5,70.6,64.9],
[40.4,45.4,77.1,65.4],
[43.2,50.9,73.5,65.7],			//23
[52.2,50.2,76.6,77.6],
[44.5,49.2,75.8,77.5],
[40.2,42,80,73.3],
[40.1,47.6,80.5,74.7],
[44.4,42.7,75.4,77.8],
[45,46.7,76.1,78.9],			//24
[47.8,40.4,80,77.1],
[43.7,40.3,78.9,77.4],
[46.4,45.9,70.7,74.1],
[47.4,44.4,71.6,72.5],
[46.7,45.6,78.8,77.1],
[46.8,41.9,77.1,79.1],			//25
[45.9,37.6,79.1,79.4],
[47.2,43.7,75.4,82],
[43.9,44.1,75.2,79.9],
[44.8,50.3,76.1,80.3],
[46.4,38.9,73,77.2],
[47.8,38.8,72.2,77.5]			//26
];

var prediction = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,
                  8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,
                  13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,
                  18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,
                  22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,26,26,26,26,26,26];

knn.train(train, prediction);
var sp;
sp = new SerialPort.SerialPort(portName, portConfig);

var RSSIRequestPacket = {
  type: C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST,
  destination64: "000000000000ffff",
  broadcastRadius: 0x01,
  options: 0x00,
  data: "test"
}

var requestRSSI = function(){
  sp.write(XBeeAPI.buildFrame(RSSIRequestPacket));
}

sp.on("open", function () {
  console.log('open');
  requestRSSI();
  setInterval(requestRSSI, sampleDelay);
});


XBeeAPI.on("frame_object", function(frame)
{
  if (frame.type == 144)
  {
    switch(frame.data[1])
    {
      case 1:
              if(flag[0] != 1)
              {
                dataset[0][0] = frame.data[0];
                flag[0] = 1;
                count++;
              }
              break;
      case 2:
              if(flag[1] != 1)
              {
                dataset[0][1] = frame.data[0];
                flag[1] = 1;
                count++;
              }
              break;
      case 3:
              if(flag[2] != 1)
              {
                dataset[0][2] = frame.data[0];
                flag[2] = 1;
                count++;
              }
              break;           
      case 4:
              if(flag[3] != 1)
              {
                dataset[0][3] = frame.data[0];
                flag[3] = 1;
                count++;
              }
              break;
    }
    if(count == 4)
    {
      console.log(dataset);
      var ans = knn.predict(dataset);
      console.log(ans);
      if(ans!= -1)
      {
        io.emit('location', ans);
      }
      dataset = [[0, 0, 0, 0]];
      flag = [0,0,0,0];
      count = 0;
    }
  }
});
